import{_ as s,c as a,o as t,a as e}from"./app-DukR-6js.js";const o={};function c(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构" aria-hidden="true">#</a> 底层数据结构</h3><ul><li><code>ArrayList</code>：<code>Object[]</code> 数组。</li><li><code>Vector</code>：<code>Object[]</code> 数组。</li><li><code>LinkedList</code>：双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)。</li></ul><h3 id="linkedlist-为什么不能实现-randomaccess-接口" tabindex="-1"><a class="header-anchor" href="#linkedlist-为什么不能实现-randomaccess-接口" aria-hidden="true">#</a> LinkedList 为什么不能实现 RandomAccess 接口？</h3><p><code>RandomAccess</code> 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 <code>LinkedList</code> 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 <code>RandomAccess</code> 接口。</p><h2 id="如何遍历list集合" tabindex="-1"><a class="header-anchor" href="#如何遍历list集合" aria-hidden="true">#</a> 如何遍历list集合</h2><p>在遍历集合的过程中如果删除元素不当，容易产生并发修改异常（java.util.ConcurrentModificationException）。</p><p>同时，很多种遍历方式的底层其实也是依赖于迭代器，直接使用迭代器的效率是最高的，用迭代器删除元素也是允许的。</p><p>如果真的想删除集合中的某个元素，建议使用<strong>removeIf</strong>方法，removeIf内部也是使用的迭代器进行的删除操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sList<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>str<span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组转换成list" tabindex="-1"><a class="header-anchor" href="#数组转换成list" aria-hidden="true">#</a> 数组转换成list</h2><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>Arrays.asList()方法返回的是Arrays的内部类ArrayList， 而不是java.util.ArrayList。</p><p>Arrays的内部类ArrayList和java.util.ArrayList都是继承AbstractList，</p><p>remove、add等方法AbstractList中是默认throw UnsupportedOperationException而且不作任何操作。</p><p>java.util.ArrayList重写了这些方法而Arrays的内部类ArrayList没有重写，所以会抛出异常。</p></div>`,12)]))}const l=s(o,[["render",c],["__file","collections002.html.vue"]]);export{l as default};
