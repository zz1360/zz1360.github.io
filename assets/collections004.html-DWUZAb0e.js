import{_ as d,c,o,a as i}from"./app-DukR-6js.js";const r={};function a(l,e){return o(),c("div",null,e[0]||(e[0]=[i('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构" aria-hidden="true">#</a> 底层数据结构</h3><ul><li><p><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现小顶堆。</p></li><li><p><code>DelayQueue</code>:<code>PriorityQueue</code>。</p></li><li><p><code>ArrayDeque</code>: 可扩容动态双向数组。</p></li></ul><h3 id="arraydeque-与-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#arraydeque-与-linkedlist-的区别" aria-hidden="true">#</a> ArrayDeque 与 LinkedList 的区别</h3><p><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了 <code>Deque</code> 接口，两者都具有队列的功能，但两者有什么区别呢？</p><ul><li><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而 <code>LinkedList</code> 则通过链表来实现。</li><li><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但 <code>LinkedList</code> 支持。</li><li><code>ArrayDeque</code> 是在 JDK1.6 才被引入的，而<code>LinkedList</code> 早在 JDK1.2 时就已经存在。</li><li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</li></ul><p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p>',7)]))}const n=d(r,[["render",a],["__file","collections004.html.vue"]]);export{n as default};
