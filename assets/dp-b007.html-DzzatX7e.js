import{_ as s,c as a,o as p,a as t}from"./app-DukR-6js.js";const e={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h2 id="享元模式原理与实现" tabindex="-1"><a class="header-anchor" href="#享元模式原理与实现" aria-hidden="true">#</a> 享元模式原理与实现</h2><p>所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省内存，前提是享元对象是不可变对象。</p><p>具体来讲，当一个系统中存在大量重复对象的时候，如果这些重复的对象是不可变对象，我们就可以利用享元模式将对象设计成享元，在内存中只保留一份实例，供多处代码引用。这样可以减少内存中对象的数量，起到节省内存的目的。实际上，不仅仅相同对象可以设计成享元，对于相似对象，我们也可以将这些对象中相同的部分（字段）提取出来，设计成享元，让这些大量相似对象引用这些享元。</p><p>定义中的“不可变对象”指的是，一旦通过构造函数初始化完成之 后，它的状态（对象的成员变量或者属性）就不会再被修改了。所以，不可变对象不能暴露任何 set() 等修改内部状态的方法。之所以要求享元是不可变对象，那是因为它会被多处代码共享使用，避免一处代码对享元进行了修改，影响到其他使用它的代码。</p><p>假设我们在开发一个棋牌游戏（比如象棋）。一个游戏厅中有成千上万个“房间”，每个房间对应一个棋局。棋局要保存每个棋子的数据，比如：棋子类型（将、相、士、炮等）、棋 子颜色（红方、黑方）、棋子在棋局中的位置。利用这些数据，我们就能显示一个完整的棋盘给玩家。具体的代码如下所示。其中，ChessPiece 类表示棋子，ChessBoard 类表示一 个棋局，里面保存了象棋中 30 个棋子的信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPiece</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> positionX<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> positionY<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">Color</span> color<span class="token punctuation">,</span> <span class="token keyword">int</span> positionX<span class="token punctuation">,</span> <span class="token keyword">int</span> positionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>positionX <span class="token operator">=</span> positionX<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>positionY <span class="token operator">=</span> positionX<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">}</span> <span class="token comment">// ...省略其他属性和getter/setter方法...</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 为了记录每个房间当前的棋局情况，我们需要给每个房间都创建一个 ChessBoard 棋局对象。
 * 因为游戏大厅中有成千上万的房间（实际上，百万人同时在线的游戏大厅也有很多），那保存这么多棋局对象就会消耗大量的内存。有没有什么办法来节省内存呢？
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">&gt;</span></span> chessPieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;車&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;馬&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//...省略摆放其他棋子的代码...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionX<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...省略...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，享元模式就可以派上用场了。像刚刚的实现方式，在内存中会有大量的相似对 象。这些相似对象的 id、text、color 都是相同的，唯独 positionX、positionY 不同。实 际上，我们可以将棋子的 id、text、color 属性拆分出来，设计成独立的类，并且作为享元 供多个棋盘复用。这样，棋盘只需要记录每个棋子的位置信息就可以了。具体的代码实现如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceUnit</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">Color</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">}</span>
    <span class="token comment">// ...省略其他属性和getter方法...</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 利用工厂类来缓存 ChessPieceUnit 信息（也就是 id、text、color）。通过工厂类获取到的 ChessPieceUnit 就是享元。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceUnitFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">&gt;</span></span> pieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        pieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;車&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;馬&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//...省略摆放其他棋子的代码...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ChessPieceUnit</span> <span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pieces<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chessPieceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPiece</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ChessPieceUnit</span> chessPieceUnit<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> positionX<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> positionY<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token class-name">ChessPieceUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">int</span> positionX<span class="token punctuation">,</span> <span class="token keyword">int</span> positionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chessPieceUnit <span class="token operator">=</span> unit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>positionX <span class="token operator">=</span> positionX<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>positionY <span class="token operator">=</span> positionY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 省略getter、setter方法</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 享元模式的代码实现非常简单，主要是通过工厂模式，在工厂类中，通过一个 Map 来缓存已经创建过的享元对象，来达到复用的目的。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span> chessPieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token class-name">ChessPieceUnitFactory</span><span class="token punctuation">.</span><span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token class-name">ChessPieceUnitFactory</span><span class="token punctuation">.</span><span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//...省略摆放其他棋子的代码...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionX<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...省略...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用享元模式之前，记 录 1 万个棋局，我们要创建 30 万（30*1 万）个棋子的 ChessPieceUnit 对象。利用享元 模式，我们只需要创建 30 个享元对象供所有棋局共享使用即可，大大节省了内存。</p><h3 id="享元模式在文本编辑器中的应用" tabindex="-1"><a class="header-anchor" href="#享元模式在文本编辑器中的应用" aria-hidden="true">#</a> 享元模式在文本编辑器中的应用</h3><p>你可以把这里提到的文本编辑器想象成 Office 的 Word。不过，为了简化需求背景，我们 假设这个文本编辑器只实现了文字编辑功能，不包含图片、表格等复杂的编辑功能。对于简 化之后的文本编辑器，我们要在内存中表示一个文本文件，只需要记录文字和格式两部分信 息就可以了，其中，格式又包括文字的字体、大小、颜色等信息。</p><p>尽管在实际的文档编写中，我们一般都是按照文本类型（标题、正文……）来设置文字的格 式，标题是一种格式，正文是另一种格式等等。但是，从理论上讲，我们可以给文本文件中 的每个文字都设置不同的格式。为了实现如此灵活的格式设置，并且代码实现又不过于太复 杂，我们把每个文字都当作一个独立的对象来看待，并且在其中包含它的格式信息。具体的 代码示例如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Font</span> font<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token class-name">Font</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>font <span class="token operator">=</span> font<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>colorRGB <span class="token operator">=</span> colorRGB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Editor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token class-name">Font</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Character</span> character <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> font<span class="token punctuation">,</span> size<span class="token punctuation">,</span> colorRGB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在文本编辑器中，我们每敲一个文字，都会调用 Editor 类中的 appendCharacter() 方法， 创建一个新的 Character 对象，保存到 chars 数组中。如果一个文本文件中，有上万、十 几万、几十万的文字，那我们就要在内存中存储这么多 Character 对象。那有没有办法可 以节省一点内存呢？</p><p>实际上，在一个文本文件中，用到的字体格式不会太多，毕竟不大可能有人把每个文字都设 置成不同的格式。所以，对于字体格式，我们可以将它设计成享元，让不同的文字共享使 用。按照这个设计思路，我们对上面的代码进行重构。重构后的代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterStyle</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Font</span> font<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CharacterStyle</span><span class="token punctuation">(</span><span class="token class-name">Font</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>font <span class="token operator">=</span> font<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>colorRGB <span class="token operator">=</span> colorRGB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CharacterStyle</span> otherStyle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CharacterStyle</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> font<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>otherStyle<span class="token punctuation">.</span>font<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">==</span> otherStyle<span class="token punctuation">.</span>size <span class="token operator">&amp;&amp;</span> colorRGB <span class="token operator">==</span> otherStyle<span class="token punctuation">.</span>colorRGB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterStyleFactory</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CharacterStyle</span><span class="token punctuation">&gt;</span></span> styles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CharacterStyle</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token class-name">Font</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CharacterStyle</span> newStyle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterStyle</span><span class="token punctuation">(</span>font<span class="token punctuation">,</span> size<span class="token punctuation">,</span> colorRGB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CharacterStyle</span> style <span class="token operator">:</span> styles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> style<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        styles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newStyle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CharacterStyle</span> style<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token class-name">CharacterStyle</span> style<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Editor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token class-name">Font</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> colorRGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Character</span> character <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token class-name">CharacterStyleFactory</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>font<span class="token punctuation">,</span> size<span class="token punctuation">,</span> colorRGB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="享元模式-vs-单例、缓存、对象池" tabindex="-1"><a class="header-anchor" href="#享元模式-vs-单例、缓存、对象池" aria-hidden="true">#</a> 享元模式 vs 单例、缓存、对象池</h2><p>我们先来看享元模式跟单例的区别:</p><ul><li>在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：多例。</li><li>我们前面也多次提到，区别两种设计模式，不能光看代码实现，而是要看设计意图，也就是要解决的问题。尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上 来看，它们是完全不同的。应用享元模式是为了对象复用，节省内存，而应用多例模式是为 了限制对象的个数。</li></ul><p>我们再来看享元模式跟缓存的区别:</p><ul><li>在享元模式的实现中，我们通过工厂类来“缓存”已经创建好的对象。这里的“缓存”实际 上是“存储”的意思，跟我们平时所说的“数据库缓存”“CPU 缓存”“MemCache 缓存”是两回事。我们平时所讲的缓存，主要是为了提高访问效率，而非复用。</li></ul><p>最后我们来看享元模式跟对象池的区别:</p><ul><li>你可能对连接池、线程池比较熟悉，对对象池比较陌生，所以，这里我简单解释一下对象池。像 C++ 这样的编程语言，内存的管理是由程序员负责的。为了避免频繁地进行对象创 建和释放导致内存碎片，我们可以预先申请一片连续的内存空间，也就是这里说的对象池。 每次创建对象时，我们从对象池中直接取出一个空闲对象来使用，对象使用完成之后，再放 回到对象池中以供后续复用，而非直接释放掉。</li><li>虽然对象池、连接池、线程池、享元模式都是为了复用，但是，如果我们再细致地抠一 抠“复用”这个字眼的话，对象池、连接池、线程池等池化技术中的“复用”和享元模式中 的“复用”实际上是不同的概念。</li><li>池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间（比如从数据库池中 取一个连接，不需要重新创建）。在任意时刻，每一个对象、连接、线程，并不会被多处使 用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用。享 元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享 的，主要目的是节省空间。</li></ul><h2 id="享元模式在-java-integer-中的应用" tabindex="-1"><a class="header-anchor" href="#享元模式在-java-integer-中的应用" aria-hidden="true">#</a> 享元模式在 Java Integer 中的应用</h2><p>当我们通过自动装箱，也就是调用 valueOf() 来创建 Integer 对象 的时候，如果要创建的 Integer 对象的值在 -128 到 127 之间，会从 IntegerCache 类中 直接返回，否则才调用 new 方法创建。实际上，这里的 IntegerCache 相当于，我们上一节课中讲的生成享元对象的工厂类，只不 过名字不叫 xxxFactory 而已。</p><p>为什么 IntegerCache 只缓存 -128 到 127 之间的整型值呢？</p><p>在 IntegerCache 的代码实现中，当这个类被加载的时候，缓存的享元对象会被集中一次性创建好。毕竟整型值太多了，我们不可能在 IntegerCache 类中预先创建好所有的整型值， 这样既占用太多内存，也使得加载 IntegerCache 类的时间过长。所以，我们只能选择缓存 对于大部分应用来说最常用的整型值，也就是一个字节的大小（-128 到 127 之间的数据）。</p><p>实际上，JDK 也提供了方法来让我们可以自定义缓存的最大值，有下面两种方式。如果你 通过分析应用的 JVM 内存占用情况，发现 -128 到 255 之间的数据占用的内存比较多，你 就可以用如下方式，将缓存的最大值从 127 调整到 255。不过，这里注意一下，JDK 并没 有提供设置最小值的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//方法一： </span>
<span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">.</span>IntegerCache<span class="token punctuation">.</span>high<span class="token operator">=</span><span class="token number">255</span>
  
<span class="token comment">//方法二： </span>
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">AutoBoxCacheMax</span><span class="token operator">=</span><span class="token number">255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，除了 Integer 类型之外，其他包装器类型，比如 Long、Short、Byte 等，也都利 用了享元模式来缓存 -128 到 127 之间的数据。</p><h2 id="享元模式在-java-string-中的应用" tabindex="-1"><a class="header-anchor" href="#享元模式在-java-string-中的应用" aria-hidden="true">#</a> 享元模式在 Java String 中的应用</h2><p>JVM 会专门开辟 一块存储区来存储字符串常量，这块存储区叫作“字符串常量池”。</p><p>不过，String 类的享元模式的设计，跟 Integer 类稍微有些不同。Integer 类中要共享的对 象，是在类加载的时候，就集中一次性创建好的。但是，对于字符串来说，我们没法事先知 道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的 时候，存储到常量池中，当之后再用到的时候，直接引用常量池中已经存在的即可，就不需 要再重新创建了。</p>`,33)]))}const i=s(e,[["render",c],["__file","dp-b007.html.vue"]]);export{i as default};
