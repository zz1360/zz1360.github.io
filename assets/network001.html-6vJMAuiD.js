import{_ as s,c as t,o as e,a as r}from"./app-DukR-6js.js";const i={};function n(c,a){return e(),t("div",null,a[0]||(a[0]=[r('<h2 id="网络分层" tabindex="-1"><a class="header-anchor" href="#网络分层" aria-hidden="true">#</a> 网络分层</h2><h3 id="七层模型和四层模型" tabindex="-1"><a class="header-anchor" href="#七层模型和四层模型" aria-hidden="true">#</a> 七层模型和四层模型</h3><h3 id="为什么要分层" tabindex="-1"><a class="header-anchor" href="#为什么要分层" aria-hidden="true">#</a> 为什么要分层</h3><details class="custom-container details"><summary class="custom-container-title">各层之间相互独立</summary><p>各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></p></details><details class="custom-container details"><summary class="custom-container-title">提高了灵活性和可替代性</summary><p>每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></p></details><details class="custom-container details"><summary class="custom-container-title">大问题化小</summary><p>分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></p></details><h3 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h3><p>位于传输层之上，主要是提供两个信息终端上应用程序的信息交换服务，定义了信息交换的格式，消息会交给下一层传输层进行传输。我们把应用层交换的信息单元称为报文。</p><h4 id="应用层常见协议" tabindex="-1"><a class="header-anchor" href="#应用层常见协议" aria-hidden="true">#</a> 应用层常见协议</h4><details class="custom-container details"><summary class="custom-container-title">http和https</summary><p>基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</p></details><details class="custom-container details"><summary class="custom-container-title">smtp</summary></details><details class="custom-container details"><summary class="custom-container-title">pop3&amp;imap</summary></details><details class="custom-container details"><summary class="custom-container-title">ftp</summary></details><details class="custom-container details"><summary class="custom-container-title">telnet&amp;ssh</summary><p>telnet是基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用 SSH，它是通过加密和认证机制实现安全的访问和文件传输等业务。</p></details><details class="custom-container details"><summary class="custom-container-title">rtp</summary></details><details class="custom-container details"><summary class="custom-container-title">dns</summary></details><h3 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层" aria-hidden="true">#</a> 传输层</h3><p>位于网络层之上，主要是为两个终端上应用进程之间的通信提供通用的数据传输服务。这一层的数据单元称作数据包(packets)。但是，当你谈论TCP等具体的协议时又有特殊的叫法，TCP的数据单元称为段 (segments)而UDP协议的数据单元称为“数据报(datagrams)”</p><h4 id="传输层常见协议" tabindex="-1"><a class="header-anchor" href="#传输层常见协议" aria-hidden="true">#</a> 传输层常见协议</h4><details class="custom-container details"><summary class="custom-container-title">TCP</summary><p>提供面向连接的，可靠的数据传输服务。</p></details><details class="custom-container details"><summary class="custom-container-title">UDP</summary><p>提供无连接的，尽最大努力的数据传输，简单高效。</p></details><h3 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层" aria-hidden="true">#</a> 网络层</h3><p>位于数据链路层之上，有关路由的一切事情都在这一层解决，地址解析和路由是这一层的重要目的。在这一层，数据的单位也被称为数据包(packet)。</p><h4 id="网络层常见协议" tabindex="-1"><a class="header-anchor" href="#网络层常见协议" aria-hidden="true">#</a> 网络层常见协议</h4><details class="custom-container details"><summary class="custom-container-title">IP（Internet Protocol，网际协议）</summary><p>定义数据包的格式，对数据包进行路由和寻址。</p></details><details class="custom-container details"><summary class="custom-container-title">ARP（Address Resolution Protocol，地址解析协议）</summary><p>ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</p></details><details class="custom-container details"><summary class="custom-container-title">ICMP（Internet Control Message Protocol，互联网控制报文协议）</summary><p>一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</p></details><details class="custom-container details"><summary class="custom-container-title">RIP（Routing Information Protocol，路由信息协议）</summary><p>一种内部网关协议，也是一种动态路由协议，选择跳数最少的路径作为最佳路径。</p></details><details class="custom-container details"><summary class="custom-container-title">BGP（Border Gateway Protocol，边界网关协议）</summary><p>一种用来在路由选择域之间交换网络层可达性信息的路由选择协议。</p></details><details class="custom-container details"><summary class="custom-container-title">NAT（Network Address Translation，网络地址转换协议）</summary><p>NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</p></details><details class="custom-container details"><summary class="custom-container-title">OSPF（Open Shortest Path First，开放式最短路径优先）</summary><p>一种内部网关协议，也是广泛使用的一种动态路由协议，考虑了链路的带宽、延迟等因素来选择最佳路径。</p></details><h3 id="网络接口层" tabindex="-1"><a class="header-anchor" href="#网络接口层" aria-hidden="true">#</a> 网络接口层</h3><p>数据链路层和物理层的合体。</p><p><strong>数据链路层的作用是将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</strong></p><p><strong>物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</strong></p><h4 id="网络接口层常见协议" tabindex="-1"><a class="header-anchor" href="#网络接口层常见协议" aria-hidden="true">#</a> 网络接口层常见协议</h4><p><strong>MAC、CSMA/CD</strong></p><h2 id="常见网络协议" tabindex="-1"><a class="header-anchor" href="#常见网络协议" aria-hidden="true">#</a> 常见网络协议</h2>',38)]))}const o=s(i,[["render",n],["__file","network001.html.vue"]]);export{o as default};
