import{_ as e,r as t,c as p,o,a as c,b as a,f as i,d as l}from"./app-DukR-6js.js";const r={},u={href:"https://blog.csdn.net/jiadajing267/article/details/106889562",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const s=t("ExternalLinkIcon");return o(),p("div",null,[n[1]||(n[1]=c(`<ul><li>设计模式讲的是如何写出可扩展、可读、可维护的高质量代码</li></ul><h2 id="如何评价代码的好坏" tabindex="-1"><a class="header-anchor" href="#如何评价代码的好坏" aria-hidden="true">#</a> 如何评价代码的好坏</h2><h3 id="什么是可维护性" tabindex="-1"><a class="header-anchor" href="#什么是可维护性" aria-hidden="true">#</a> 什么是可维护性</h3><p>如果bug容易修复、修改、添加功能能够轻松完成，那我们就可以主观的认为代码对我们易维护。相反，我们就可以主观的认为不易维护。</p><h3 id="什么是可读性" tabindex="-1"><a class="header-anchor" href="#什么是可读性" aria-hidden="true">#</a> 什么是可读性</h3><p>code review是一个测验代码可读性的手段。如果你的同事能够轻松的读懂你的代码，那说明你的代码的可读性很好；如果你的同事读你的代码还有很多疑问，那说明你的代码可读性还有待提高。</p><h3 id="什么是可扩展性" tabindex="-1"><a class="header-anchor" href="#什么是可扩展性" aria-hidden="true">#</a> 什么是可扩展性</h3><p>在不修改或者少量修改原有代码的情况下，通过扩展添加新的功能点。</p><h3 id="什么是灵活性" tabindex="-1"><a class="header-anchor" href="#什么是灵活性" aria-hidden="true">#</a> 什么是灵活性</h3><p>这个维度的解释很灵活。</p><h3 id="简洁性" tabindex="-1"><a class="header-anchor" href="#简洁性" aria-hidden="true">#</a> 简洁性</h3><h3 id="可复用性" tabindex="-1"><a class="header-anchor" href="#可复用性" aria-hidden="true">#</a> 可复用性</h3><h3 id="可测性性" tabindex="-1"><a class="header-anchor" href="#可测性性" aria-hidden="true">#</a> 可测性性</h3><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><p>面向对象编程就是以类或者对象作为组织代码的基本单位，将封装、继承、抽象、多态四大特性，作为代码设计和实现的基石。</p><p>封装通过访问权限控制暴露有限的接口，使类具有易用性和安全性。</p><p>抽象则是我们在定义类或者方法的时候，要有抽象思维，隐藏方法的具体实现，不要在方法定义中暴露太多细节，以保证在某个时间点需要修改方法的逻辑时，不用修改其定义。</p><p>继承最大的好处就是代码复用，但是我们也可以通过组合关系也可以达到这个目的，继承除了代码复用，还可以表达一种is-a关系，比较符合人类认知。</p><p>多态就是将父类对象的应用指向子类实现类。还有一种实现多态的方法就是duck-typing，比如Python语言就支持这种语法特性，只要两个类具有相同的方法，就可以实现多态，并不需要两个类具有任何关系。</p><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则" aria-hidden="true">#</a> 设计原则</h2><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则" aria-hidden="true">#</a> 单一职责原则</h3><h3 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则" aria-hidden="true">#</a> 开闭原则</h3><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则" aria-hidden="true">#</a> 里氏替换原则</h3><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则" aria-hidden="true">#</a> 接口隔离原则</h3><h3 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则" aria-hidden="true">#</a> 依赖倒置原则</h3><h3 id="dry原则、kiss原则、yagni原则、lod原则" tabindex="-1"><a class="header-anchor" href="#dry原则、kiss原则、yagni原则、lod原则" aria-hidden="true">#</a> DRY原则、KISS原则、YAGNI原则、LOD原则</h3><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h2><p>大部分设计模式都是用来解决代码的可扩展性问题。可以解决哪些问题，有哪些典型的应用场景，不要过度使用。</p><h3 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型" aria-hidden="true">#</a> 创建型</h3><p>常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式</p><h4 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h4><p>DCL单例模式中有人说instance 成员变量需要加上 volatile 关键字，禁止指令重排序才行。实际上，只有很低版本的 Java 才会有这个问题。我们现在用的高版本的 Java 已经在 JDK 内部实现中解决了这个问题（解决的方法很简单，只要把对象 new 操作和初始化操作 设计为原子操作，就自然能禁止重排序）。</p><h3 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型" aria-hidden="true">#</a> 结构型</h3><p>常用的有：代理模式、桥接模式、装饰者模式、适配器模式</p><h3 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型" aria-hidden="true">#</a> 行为型</h3><p>常用的有：观察者模式、模版模式、策略模式、职责链模式、迭代器模式、状态模式</p><h1 id="暂时放在下面" tabindex="-1"><a class="header-anchor" href="#暂时放在下面" aria-hidden="true">#</a> 暂时放在下面</h1><h3 id="装饰者设计模式与静态代理设计模式的对比" tabindex="-1"><a class="header-anchor" href="#装饰者设计模式与静态代理设计模式的对比" aria-hidden="true">#</a> 装饰者设计模式与静态代理设计模式的对比</h3><p>相同点：</p><ul><li>装饰者类与目标类要求实现同一接口；静态代理类与目标类要求也实现同一接口。</li><li>装饰者类与静态代理类都可以实现增强目标类的功能。</li><li>装饰者类与静态代理类中都具有目标类的引用，目的都是为了在其中调用目标类的方 法。</li></ul><p>不同点</p><ul><li>装饰者设计模式就是为了增强目标类；静态代理设计模式是为了保护和隐藏目标对象， 让客户类只能访问代理对象，而不能直接访问目标对象。</li><li>装饰者类中的目标类的引用是通过带参构造器传入的；静态代理类中的目标类的引用， 一般都是在代理类中直接创建的，目的就是为了隐藏目标对象。</li><li>装饰者基类一般不对目标对象进行增强，而是由不同的具体装饰者进行增强的，且这 些具体的装饰者可以形成增强链，对目标对象进行连续增强。静态代理类会直接对目标对象 进行增强，需要哪些增强的功能，一次性在静态代理类中完成，没有增强链的概念。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//装饰抽象类继承Component</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
 
    <span class="token comment">//装饰器的核心</span>
    <span class="token keyword">protected</span> <span class="token class-name">Component</span> component<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">component<span class="token punctuation">.</span></span>Operation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//装饰的具体实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">super<span class="token punctuation">.</span></span>Operation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体装饰对象A的操作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">super<span class="token punctuation">.</span></span>Operation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体装饰对象B的操作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//对象具体实现，但是不知道要使用链上的哪个类</span>
        <span class="token class-name">Handler</span> handler1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Handler</span> handler2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        handler1<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>handler2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
       <span class="token class-name">ConcreteDecoratorA</span> decoratorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">ConcreteDecoratorB</span> decoratorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        decoratorA<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>handler1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        decoratorB<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>decoratorA<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requests <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">decoratorB<span class="token punctuation">.</span></span>Operation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43)),a("p",null,[a("a",u,[n[0]||(n[0]=i("装饰模式VS职责链模式")),l(s)])])])}const v=e(r,[["render",d],["__file","program003.html.vue"]]);export{v as default};
