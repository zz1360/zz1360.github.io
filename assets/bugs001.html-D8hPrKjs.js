import{_ as e,c as s,o as n,a as o}from"./app-DukR-6js.js";const a={};function r(i,t){return n(),s("div",null,t[0]||(t[0]=[o('<div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">报错原因</p><p>业务json格式不正确</p></div><h2 id="报错场景" tabindex="-1"><a class="header-anchor" href="#报错场景" aria-hidden="true">#</a> 报错场景</h2><ul><li>调用接口传输过来的JSON格式数据错误，如<code>String json = &quot;[2022,2023,2024&quot;;</code> 要是调用fastjosn转换成<code>List&lt;Integer&gt;</code>数组,就会报OOM错误</li><li>除此之外，该数组字符串即使存在右括号，当里面的元素存在非数字就会OOM</li><li>版本是：fastjson 2.0.32，后续版本已经修复，如果一定要用fastjson，可以使用fastjson2</li><li>建议直接使用Spring内置的Jackson</li></ul><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><p>为了fast，所以肯定会牺牲很多校验和严谨性。要不然性能肯定下去。业务自己保证json格式一定没问题，那么fastjson运行就没问题。如果业务不能保证json格式正确性，就不要奢求fast。技术不是万能的，一个方面有优势可能会舍弃另一些方面的能力。如果业务追求的是稳定性不会出错，就做不到高性能。</p>',5)]))}const c=e(a,[["render",r],["__file","bugs001.html.vue"]]);export{c as default};
